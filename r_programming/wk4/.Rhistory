?Rprof
Rprof()
lm(y ~ x)
sample.interval=10000
lm(y ~ x)
set.seed(1)
rpois(5, 2)
?rnorm
?set.seed
?rpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y <- 10
x1 <- 5
x2 < 7.4
x2 <- 7.4
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
Rprof(fit)
Rprof(lm)
summaryRprof(fit)
summaryRprof(lm)
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?summaryRprof()
summaryRprof(by.total)
str(lm)
getwd()
setwd("C:/Users/Randall/rhelms_data/datasciencecoursera/wk4")
list.files()
outcome <- read.csv("outcome-of-care-measures.csv")
head(outcome)
summary(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
names(outcome)
ncol(outcome)
nrow(outcome)
outcome  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)
outcome[1:2,1:5]
outcome[1:5,]
summary(outcome[,11])
outcomes1 <- c(“heart attack”=11, “heart failure”=17, “pneumonia”=23)
heart <- outcome$Comparison.to.U.S..Rate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
heart
summary(heart)
str(heart)
?sort
sort(outcome,decreasing = FALSE)
outcome  <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
outc <- outcome[,c(2,7,11,17,23)]
head(outc)
names(outc)
names(outc) <- c("hospital","state","heart attack","heart failure","pneumonia")
head(outc)
outcome2  <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
names(outcome2) <- c("hospital","state","heart attack","heart failure","pneumonia")
names(outcome2)
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
state <- od[,2]
outcomes <- od[,3:5]
names(outcomes)
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
outcomes <- od[,3:5
]
names(outcomes)
?min
?helper
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
} else if (! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia")) {
stop("invalid outcome")
}
#change data type to numeric
od[,11] <- as.numeric(data[,11]) #heart attack
od[,17] <- as.numeric(data[,17]) #heart failure
od[,23] <- as.numeric(data[,23]) #pneumonia
#set state
state <- od$state
#set outcomes
if(outcome == "heart attack") {result = od[,c(1,3)]}
else if(outcome == "heart failure") {result = od[,c(1,4)]}
else if(outcome == "pneumonia") {result = od[,c(1,5)]}
#return result
return(od$hospital)
}
best(AK,"heart attack")
best("AK","heart attack")
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
} else if (! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia")) {
stop("invalid outcome")
}
#change data type to numeric
od[,3] <- as.numeric(data[,11]) #heart attack
od[,4] <- as.numeric(data[,17]) #heart failure
od[,5] <- as.numeric(data[,23]) #pneumonia
#set state
state <- od$state
#set outcomes
if(outcome == "heart attack") {result = od[,c(1,3)]}
else if(outcome == "heart failure") {result = od[,c(1,4)]}
else if(outcome == "pneumonia") {result = od[,c(1,5)]}
#return result
return(od$hospital)
}
best("AK","heart attack")
?ad.numeric
?as.numeric
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
} else if (! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia")) {
stop("invalid outcome")
}
#change data type to numeric
od[,3] <- as.numeric(od[,3]) #heart attack
od[,4] <- as.numeric(od[,4]) #heart failure
od[,5] <- as.numeric(od[,5]) #pneumonia
#set state
state <- od$state
#set outcomes
if(outcome == "heart attack") {result = od[,c(1,3)]}
else if(outcome == "heart failure") {result = od[,c(1,4)]}
else if(outcome == "pneumonia") {result = od[,c(1,5)]}
#return result
return(od$hospital)
}
best("AK","heart attack")
?which.min
?sapply
best("RU","heart attack")
best("AK","fish")
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set state
states <- unique(od$state)
#set outcomes
outcomes <- od[,3:5]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% states) {
stop("invalid state")
} else if (!outcome %in% outcomes) {
stop("invalid outcome")
}
if(outcome == "heart attack") {result = od[,c(1,3)]}
else if(outcome == "heart failure") {result = od[,c(1,4)]}
else if(outcome == "pneumonia") {result = od[,c(1,5)]}
#return result
return(result)
}
best("AK","heart attack")
best("NY","heart attack")
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set state
states <- unique(od$state)
#set outcomes
outcomes <- od[,3:5]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
} else if (!outcome %in% outcomes) {
stop("invalid outcome")
}
if(outcome == "heart attack") {result = od[,c(1,3)]}
else if(outcome == "heart failure") {result = od[,c(1,4)]}
else if(outcome == "pneumonia") {result = od[,c(1,5)]}
#return result
return(result)
}
best("AK","heart attack")
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set state
states <- unique(od$state)
#set outcomes
outcome <- od[,3:5]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
} else if (!outcome %in% outcomes) {
stop("invalid outcome")
}
if(outcomes == "heart attack") {result = od[,c(1,3)]}
else if(outcomes == "heart failure") {result = od[,c(1,4)]}
else if(outcomes == "pneumonia") {result = od[,c(1,5)]}
#return result
return(result)
}
best("AK","heart attack")
##Part 2: best.R:
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best("AK","heart attack")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
##Part 3: rankhospital.R:
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death
## rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
}
##Part 4: rankall.R:
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that outcome is valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital
)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
View(rankall)
View(rankall)
View(best)
View(best)
View(rankhospital)
View(rankhospital)
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best1 <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set state
states <- unique(od$state)
#set outcomes
oc <- od[,3:5]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
oc_col <- if(outcome == "heart attack") {3}
else if(outcome == "heart failure") {4}
else if(outcome == "pneumonia") {5}
#return result
return(od[,oc_col])
}
best1("AK","heart attack")
?suppressWarnings
?levels
?grep
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best1 <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set state
states <- unique(od$state)
#set outcomes
oc <- od[,3:5]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
#return outcome column
oc_col <- if(outcome == "heart attack") {3}
else if(outcome == "heart failure") {4}
else if(outcome == "pneumonia") {5}
#return result
od[,oc_col] <- suppressWarnings(as.numeric(levels(od[, oc_col])[od[, oc_col]]))
od[, 2] <- as.character(od[, 2])
statedata <- od[grep(state, od$State), ]
orderdata <- statedata[order(statedata[, oc_col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best1("AK","heart attack")
best1("NY","pneumonia")
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best1 <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set state
states <- unique(od$state)
#set outcomes
oc <- od[,3:5]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
#return outcome column
oc_col <- if(outcome == "heart attack") {3}
else if(outcome == "heart failure") {4}
else if(outcome == "pneumonia") {5}
#return result
od[,oc_col] <- suppressWarnings(as.numeric(levels(od[, oc_col])[od[, oc_col]]))
od[, 2] <- as.character(od[, 2])
statedata <- od[grep(state, od$state), ]
orderdata <- statedata[order(statedata[, oc_col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best1("NY","pneumonia")
# write function that takes two arguments:
#   1. 2-character abbreviation of a state
#   2. outcome name
best1 <- function(state,outcome) {
# read outcome data
od  <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = "Not Available", stringsAsFactors = FALSE)[,c(2,7,11,17,23)]
#set state
states <- unique(od$state)
#set outcomes
oc <- od[,3:5]
#set names
names(od) <- c("hospital","state","heart attack","heart failure","pneumonia")
#check validity
if (!state %in% od$state) {
stop("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
#return outcome column
oc_col <- if(outcome == "heart attack") {3}
else if(outcome == "heart failure") {4}
else if(outcome == "pneumonia") {5}
#return result
od[,oc_col] <- suppressWarnings(as.numeric(levels(od[, oc_col])[od[, oc_col]]))
od[, 2] <- as.character(od[, 2])
statedata <- od[grep(states, od$state), ]
orderdata <- statedata[order(statedata[, oc_col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best1("NY","pneumonia")
