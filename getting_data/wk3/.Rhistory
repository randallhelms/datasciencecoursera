str(set.seed)
?set.seed
rpois(10,1)
rpois(2,3)
ppois(2,2)
str(ppois)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
plot(x,y)
hist(x)
hist(y)
set.seed(10)
x1 <- rbinom
e1 <- rnorm(100,0,2)
x1 <- rbinom(100,1,0.5)
y1 <- 0.5 + 2 * x1 + e1
plot(x1,y1)
summary(y1)
set.seed(1)
x2 <- rnorm(100)
log.mu <- 0.5 + 0.3 * x2
y2 <- rpois(100,exp(log.mu))
plot(x2,y2)
sample(1:10,4)
sample(1:10
)
sample(letters,4)
con = url("https://www.reddit.com/r/ukpolitics/comments/4q972b/somebody_needs_to_come_out_and_say_that/")
rUKpol = readLines(con)
con = url("http://www.reddit.com/r/ukpolitics/comments/4q972b/somebody_needs_to_come_out_and_say_that/")
rUKpol = readLines(con)
library(XML)
close(con)
url <- "https://www.reddit.com/r/ukpolitics/comments/4q972b/somebody_needs_to_come_out_and_say_that/"
html <- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html, "//title",xmlValue)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html, "//title",xmlValue)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html, "//title",xmlValue)
url2 <- "http://www.reddit.com/r/ukpolitics/comments/4q972b/somebody_needs_to_come_out_and_say_that/"
html2 <- htmlTreeParse(url2,useInternalNodes = T)
html
html2
html2 <- htmlTreeParse(url2,useInternalNodes = T)
library(RCurl)
rUK <- getURL(url2)
rUK <- readHTMLTable(rUK,stringsAsFactors = F)
url2
head(rUKpol)
url2
library(httr); html2 = GET(url2)
library(httr); html = GET(url2)
library(httr)
html1 = GET(url2)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html, "//title",xmlValue)
library(httr); html = GET(url)
library(httr); html2 = GET(url)
content2 = content(html2,as ="text" )
parsedHtml = htmlParse(content2,asText = TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
myapp = oauth_app("twitter"
key="sJYNNXZfGbqBbbaFGOUyg",secret="N2H30wZRIPopehgIU2Go6HzIbgGvcWQ2V5zN5a7WH0")
myapp = oauth_app("twitter",
key="sJYNNXZfGbqBbbaFGOUyg",secret="N2H30wZRIPopehgIU2Go6HzIbgGvcWQ2V5zN5a7WH0")
sig = sign_oauth1.0(myapp,
token = "119105679-Pl04vtcXSnEdVGOirIVAkquhSXZB4QsNfh2Gd55Z",
token_secret = "U9WVhTJ4VVUsbI3U2WorVqHnkeLDc19t4aVwfNSQ")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
install.packages("openssl")
library(openssl)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
homeTL
head(homeTL)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2[5,1:4]
names(json2)
?zip.unpack
library(foreign)
install.packages("RPostresSQL")
install.packages("RPostgreSQL")
install.packages("RODBC")
install.packages("RMongo")
install.packages(c("jpeg", "readbitmap", "png"))
install.packages("caTools")
install.packages("tuneR")
install.packages("seewave")
install.packages("sqldf")
git_id = "0f0a2fd5902ce287334a"
git_secret = "e2e13b19c6faaec7ed7eb1819311088f2c78fdc2"
gitAPI <- oauth_app("github", git_id, git_secret)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitAPI)
install.packages("Rcpp")
library(Rcpp)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitAPI)
?oauth_endpoints
install.packages("httr")
install.packages("httr")
gitApp <- oauth_app("github", git_id, git_secret)
oauth_endpoints("github")
oaut
oauth_endpoints(gitApp)
?oauth_app
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
install.packages("httpuv")
install.packages("httpuv")
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
library(jsonlite)
library(httr)
library(httpuv)
install.packages(httpuv)
install.packages("httpuv")
git_id = "0f0a2fd5902ce287334a"
git_secret = "e2e13b19c6faaec7ed7eb1819311088f2c78fdc2"
gitApp <- oauth_app("github", git_id, git_secret)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
library(jsonlite)
library(httr)
library(httpuv)
install.packages(c("bigrquery", "checkmate", "crayon", "DBI", "devtools", "httr", "jsonlite", "plyr", "RMySQL"))
install.packages(c("bigrquery", "checkmate", "crayon", "DBI",
)
install.packages(c("bigrquery", "checkmate", "crayon", "DBI", "devtools", "httr", "jsonlite", "plyr", "RMySQL"))
install.packages(c("bigrquery", "checkmate", "crayon", "DBI",
git_id = "8188eaaa449ff7cbe169"
git_secret = "c03528f11f49e3d46dd81edfd28224b41b049b49"
library(jsonlite)
library(httr)
library(httpuv)
gitApp <- oauth_app("github", git_id, git_secret)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
library(jsonlite)
library(httr)
library(httpuv)
git_id = "0f0a2fd5902ce287334a"
git_secret = "e2e13b19c6faaec7ed7eb1819311088f2c78fdc2"
gitApp <- oauth_app("github", git_id, git_secret)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
install.packages(c("httr", "jsonlite"))
install.packages(c("httr", "jsonlite"))
install.packages(c("httr", "jsonlite"))
install.packages(c("plyr", "RMySQL"))
install.packages(c("bigrquery", "checkmate", "crayon", "DBI"))
library(jsonlite)
library(httr)
library(Rcpp)
library(httpuv)
git_id = "0f0a2fd5902ce287334a"
git_secret = "e2e13b19c6faaec7ed7eb1819311088f2c78fdc2"
gitApp <- oauth_app("github", git_id, git_secret)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
git_id = "0f0a2fd5902ce287334a"
git_secret = "e2e13b19c6faaec7ed7eb1819311088f2c78fdc2"
gitApp <- oauth_app("github", git_id, git_secret)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
library(jsonlite)
library(httr)
library(Rcpp)
library(httpuv)
git_id = "0f0a2fd5902ce287334a"
git_secret = "e2e13b19c6faaec7ed7eb1819311088f2c78fdc2"
gitApp <- oauth_app("github", git_id, git_secret)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
?httpuv
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
library(jsonlite)
library(httr)
library(httpuv)
gitApp
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
?readRDS
library(sqdlf)
library(sqldf)
acsURL = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
doc <- file.path(getwd(),"acsdata.csv")
download.file(acsURL,doc)
acs <- data.table(read.csv(doc))
library(data.table)
acs <- data.table(read.csv(doc))
sqldf("select * from acs")
q2 <- sqldf("select * from acs where AGEP < 50")
q2
q3 <- sqldf("select pwgtp1 from acs where AGEP < 50")
q3
q4 <- qldf("select pwgtp1 from acs")
q4 <- sqldf("select pwgtp1 from acs")
q4
q3
unique(acs$AGEP)
unique(acs$AGEP) = sqldf("select distinct pwgtp1 from acs")
q3 <- unique(acs$AGEP)
q3a1 <- sqldf("select distinct pwgtp1 from acs")
q3 = q3a1
q3 <- unique(acs$AGEP)
q3 == q3a1
q3a2 <- sqldf("select distinct AGEP from acs")
q3a3 <- sqldf("select AGEP where unique from acs")
q3a4 <- sqldf("select unique AGEP from acs")
q3 == q3a2
library(nch)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
q4 <- readLines(connection)
close(connection)
c(nchar(q4[10]), nchar(q4[20]), nchar(q4[30]), nchar(q4[100]))
q5URL = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
q5 <- readLines(q5URL, n=9)
q5
sum(q5[,4])
head(q5)
q5[,5]
q5[5,]
str(q5)
class(q5)
q5[4,]
library(fwf)
install.packages(fwf)
install.packages("read.fwf")
install.packages("readr")
library(readr)
x <- read_fwf(q5URL,skip = 4,fwf_widths(c(12,7,4,9,4,9,4,9,4)))
sum(x[,4])
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
library(httr)
library(httpuv)
require(httpuv)
require(jsonlite)
gitApp <- oauth_app("github", git_id, git_secret)
git_token <- oauth2.0_token(oauth_endpoints("github"),gitApp)
?readRDS
search()
library(reshape2)
head(mtcars)
?reshape2
?reshape
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl").measure.vars=c("mpg","hp"))
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
head(carMelt,n=3)
?melt
tail(carMelt,n=3)
cylData <- dcast(carMelt,cyl ~ variable)
cylData
cylData <- dcast(carMelt,cyl ~ variable, mean)
cylData
cylData2 <- dcast(carMelt,cyl ~ variable,sum)
cylData2
cylData2 <- dcast(carMelt,cyl ~ variable,median)
cylData2
?dcast
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
spIns = split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount = lapply(spIns,sum)
sprCount
unlist(sprCount)
sapply(spIns,sum)
library(plyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
spraySums <- ddply(InsectSprays,.(spray),summarize,sum=ave(count,FUN=sum))
dim(spraySums)
head(spraySums)
?ave
library(dplyr)
search()
getwd()
setwd("C:/Users/Randall/rhelms_data/DataScienceSpecialization")
setwd("C:/Users/Randall/rhelms_data/courses/03_GettingData/dplyr")
list.files()
chicago <- readRDS("chicago.rds")
head(chicago,n=3)
dim(chicago)
str(chicago)
names(chicago)
head(select(chicago,city:dptp))
i <- match("city",names(chicago))
j <- match("dptp",names(chicago))
head(chicago[,-(i:j)])
head(select(chicago,-(city:dptp))
)
chic.f <- filter(chicago, pm25tmean2 > 30)
head(chic.f)
chic.ft <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
head(chic.ft)
dim(chic.ft)
chicago <- arrange(chicago,date)
head(chicago)
?desc
chicago <- arrange(chicaog,desc(date))
chicago <- arrange(chicago,desc(date))
head(chicago)
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
chicago <- mutate(chicago, pm25detrend = pm25-mean(pm25,na.rm = TRUE))
head(chicago)
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), lables = c("cold","hot")))
chicago <- mutate(chicago, tempcat = factor(1 * (tmpd > 80), labels = c("cold","hot")))
hotcold <- group
hotcold <- group_by(chicago,tempcat)
hotcold
summarize(hotcold, pm25 = mean(pm25), o3 = max(o3tmean2),no2 = median(no2tmean2))
summarize(hotcold, pm25 = mean(pm25, na.rm = TRUE), o3 = max(o3tmean2),no2 = median(no2tmean2))
chicago <- mutate(chicago,year = as.POSIXlt(date)$year + 1900)
year
years <- group_by(chicago,year)
summarize(years,pm25 = mean(pm25, na.rm = TRUE), o3 = max(o3tmean2),no2 = median(no2tmean2)))
summarize(years, pm25 = mean(pm25, na.rm = TRUE), o3 = max(o3tmean2),no2 = median(no2tmean2))
?as.POSIXlt
names(chicago)
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1) %>% group_by(month) %>% summarize(pm25 = mean(pm25, na.rm = TRUE), o3 = max(ot3mean2), no2 = median(no2tmean2))
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1) %>% group_by(month) %>% summarize(pm25 = mean(pm25, na.rm = TRUE), o3 = max(o3tmean2), no2 = median(no2tmean2))
install.packages("DBI")
search()
getwd()
setwd("C:/Users/Randall/rhelms_data/datasciencecoursera/getting_data")
setwd("C:/Users/Randall/rhelms_data/datasciencecoursera/getting_data/wk3")
getwd()
fileURL1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileURL2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileURL1,destfile = "./data/reviews.csv",method = "curl")
download.file(fileURL2,destfile = "./data/solutions.csv",method = "curl")
reviews <- read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
dim(reviews)
dim(solutions)
head(solutions,2)
names(reviews)
head(reviews,2)
mergedData = merge(reviews,solutions,by.x = "solution_id",by.y = "id", all = TRUE)
head(mergedData)
intersect(names(solutions),names(reviews))
mergedData2 = merge(reviews,solutions,all = TRUE)
head(mergedData2)
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df2 = data.frame(id=samepl(1:10),y=rnorm(10))
df2 = data.frame(id=sample(1:10),y=rnorm(10))
arrange(join(df1,df2),id)
df3 = data.frame(id=sample(1:10),z=rnorm(10))
dfList = list(df1,df2,df3)
join_all(dfList)
dfList1 <- join_all(dfList)
download.file(qURL1destfile = "./data/idaho.csv",method = "curl")
download.file(qURL1,destfile = "./data/idaho.csv",method = "curl")
qURL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(qURL1,destfile = "./data/idaho.csv",method = "curl")
idahoACS <- read.csv("./data/idaho.csv")
table(idahoACS$ACR)
table(idahoACS$AGS)
head(select(idahoACS,ACR:AGS))
agricultureLogical = (idahoACS$ACR == 3 & idahoACS$AGS == 6)
which(idahoACS$ACR == 3 & idahoACS$AGS == 6)
?which
which(agricultureLogical)
library(jpeg)
?jpeg
jeffURL = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
jeff <- readJPEG(jeffURL,native = TRUE)
?download.file
download.file(jeffURL, destfile = "./data/jeff.jpg", method = "curl")
jeffPic = "./data/jeff.jpg"
jeff <- readJPEG(jeffPic,native = TRUE)
head(jeff)
quantile(jeff,probs = c(0.3,0.8))
q3URL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
q3URL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(q3URL1,destfile = "./data/gdp.csv",method = "curl")
download.file(q3URL2,destfile = "./data/education.csv",method = "curl")
gdp <- read.csv("./data/gdp.csv"); eduRank <- read.csv("./data/education.csv")
names(gdp)
names(eduRank)
head(gdp,n=3)
head(eduRank,n=3)
head(gdp,n=10)
q3Merge = merge(gdp,eduRank,by.x = "X",by.y = "CountryCode", all = TRUE)
head(q3Merge,n=5)
head(q3Merge,n=10)
intersect(names(gdp),names(eduRank))
?write.csv
write.table
write.table(q3Merge,file = "./data/merge.csv")
write.table(q3Merge,file = "./data/merge.csv",sep = ",")
q3Merge <- arrange(q3Merge,desc(X.1))
head(q3Merge,n=5)
?merge
q3Merge = merge(gdp,eduRank,by.x = "X",by.y = "CountryCode", all = FALSE)
head(q3Merge)
q3Merge <- arrange(q3Merge,desc(X.1))
head(q3Merge)
write.table(q3Merge, file = "./data/merge2.csv",sep = ",")
q3Merge <- arrange(q3Merge,desc(Lending.category))
head(q3Merge)
library(data.table)
q3Merge2 = merge(gdp,eduRank, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(q3Merge$X.1)))
head(q3Merge$X.1,n=15)
setnames(gdp, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "gdpRank", "fullName", "gdp"))
q3Merge = merge(gdp,eduRank,by.x = "X",by.y = "CountryCode", all = FALSE)
q3Merge2 = merge(gdp,eduRank,by = "CountryCode", all = TRUE)
write.table(q3Merge2, file = "./data/merge.csv",sep = ",")
write.table(q3Merge, file = "./data/merge.csv",sep = ",")
sum(!is.na(unique(q3Merge$gdpRank)))
names(gdp)
head(gdp)
str(q3Merge)
sum(!is.na(unique(q3Merge$gdpRank)))
setnames(gdp, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "gdpRank","fullName", "gdpValue"))
write.table(q3Merge2, file = "./data/merge.csv",sep = ",")
q3Merge = merge(gdp,eduRank,by = "CountryCode", all = TRUE)
write.table(q3Merge, file = "./data/merge2.csv",sep = ",")
sum(!is.na(unique(q3Merge$gdpRank)))
apply(q3Merge,2,function(x) length(which(!is.na(g3Merge$gdpRank))))
apply(q3Merge,2,function(x) length(which(!is.na(q3Merge$gdpRank))))
colSums(!is.na(q3Merge$gdpRank))
sum(!is.na(q3Merge$gdpRank))
?sum
length(q3Merge$gdpRank,na.rm = TRUE)
?length
sum(q3Merge$gdpRank,na.rm = TRUE)
?data.table
?read.csv
gdp <- read.csv("./data/gdp.csv",skip = 4, nrows = 215)
eduRank <- read.csv("./data/education.csv")
setnames(gdp, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "gdpRank","fullName", "gdpValue"))
q3Merge = merge(gdp,eduRank,by = "CountryCode", all = TRUE)
write.table(q3Merge, file = "./data/merge2.csv",sep = ",")
gdp <- read.csv("./data/gdp.csv",skip = 5, nrows = 215)
setnames(gdp, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "gdpRank","fullName", "gdpValue"))
q3Merge = merge(gdp,eduRank,by = "CountryCode", all = TRUE)
write.table(q3Merge, file = "./data/merge2.csv",sep = ",")
gdp <- read.csv("./data/gdp.csv",skip = 4, nrows = 215)
setnames(gdp, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "gdpRank","fullName", "gdpValue"))
q3Merge = merge(gdp,eduRank,by = "CountryCode", all = TRUE)
write.table(q3Merge, file = "./data/merge2.csv",sep = ",")
sum(!is.na(unique(q3Merge$gdpRank)))
q3Merge <- arrange(q3Merge,desc(gdpRank))
head(q3merge,n=15)
head(q3Merge,n=15)
q3Merge$fullName[13,]
q3Merge$fullName[,13]
q3Merge$fullName[13]
write.table(q3Merge, file = "./data/merge.csv",sep = ",")
q3Merge[, mean(gdpRank, na.rm = TRUE), by = Income.Group]
?mean
mean(q3Merge$gdpRank,na.rm = TRUE, by = q3Merge$Income.Group)
q3Merge[,mean(q3Merge$gdpRank,na.rm = TRUE), by = q3Merge$Income.Group]
iGR <- q3Merge$Income.Group
gdpRank <- q3Merge$gdpRank
q4Mean <- q3Merge[,lapply(.SD,mean,na.rm=TRUE),by=iGR,.SDcols=gdpRank]
names(iGR)
class(iGR)
?.SDCols
?.SD
?SDcols
?SD
library(data.table)
q4Mean <- q3Merge[,lapply(.SD,mean,na.rm=TRUE), by = iGR, .SDcols = gdpRank]
aggregate(q3Merge[,gdpRank],list(iGR),mean)
aggregate(q3Merge[,3],list(iGR),mean)
q3Merge[, mean(gdpRank, na.rm = TRUE), by = iGR]
?aggregate
?na.action
aggregate(q3Merge[,3],list(iGR),mean,na.action = NULL)
q3Merge[, mean(gdpRank, na.rm = TRUE), by = iGR]
aggregate(q3Merge[2:150,3],list(iGR),mean,na.action = NULL)
aggregate(q3Merge[,3],list(iGR),mean,na.action = NULL)
tail(q3merge,n=15)
tail(q3Merge,n=15)
tail(q3Merge[,1:3],n=25)
tail(q3Merge[,1:3],n=40)
q3Merge[,1:3]
q4Merge <- q3Merge[1:190,]
iGR <- q4Merge$Income.Group
aggregate(q4Merge[,3],list(iGR),mean)
write.table(q4Merge, file = "./data/mergeq4.csv",sep = ",")
aggregate(q4Merge[,2],list(iGR),mean)
aggregate(q3Merge[,2],list(iGR),mean,na.action = NULL)
quantile(q4Merge$gdpRank,probs = c(0.2,0.4,0.6,0.8))
q4Merge$gdpQuantiles <- cut(q4Merge$gdpRank,breaks = quantile(q4Merge$gdpRank))
q4Merge$gdpQuantiles <- cut(q4Merge$gdpRank,breaks = quantile(q4Merge$gdpRank)
)
head(q4Merge$gdpQuantiles)
?quantile
?quintile
gr = q4Merge$gdpRank
q4Merge$gdpQuantiles <- cut(gr,breaks = c(quantile(gr), probs = seq(0,1, by = 0.20)))
?breaks
gq <- quantile(gr, probs = seq(0,1, by = 0.20))
q4Merge$gdpQuantiles <- cut(gr,breaks = gq)
head(q4Merge$gdpQuantiles)
?cut
?table
gQuan = q4Merge$gdpQuantiles
q5 <- (iGR,gquan)
q5 <- table(iGR,gquan)
q5 <- table(iGR,gQuan)
q5
q5[4,]
q5[5,]
?seq
